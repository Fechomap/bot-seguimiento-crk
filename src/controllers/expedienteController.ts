import TelegramBot from 'node-telegram-bot-api';
import { validateExpedienteNumber, sanitizeInput } from '../utils/validators.js';
import { getSeguimientoKeyboard } from '../utils/keyboards.js';
import { formatCurrency, formatDateTime, hexToColorName } from '../utils/formatters.js';
import type { Usuario, DatosExpediente, ExpedienteCompleto } from '../types/index.js';
import type { BotService } from '../services/botService.js';

// Importaciones de los controladores espec√≠ficos
import { handleCostoServicio } from './costoController.js';
import { handleDatosUnidad } from './unidadController.js';
import { handleUbicacionTiempo } from './ubicacionController.js';
import { handleTiempos } from './tiemposController.js';

/**
 * Procesa la solicitud de n√∫mero de expediente con pre-carga autom√°tica
 */
export async function processExpedienteRequest(
  bot: TelegramBot,
  chatId: number,
  usuario: Usuario,
  mensaje: string,
  botService: BotService
): Promise<void> {
  // Sanitizar y validar entrada
  const expedienteInput = sanitizeInput(mensaje);

  if (validateExpedienteNumber(expedienteInput)) {
    const expediente = expedienteInput;
    console.info(`üîç Buscando expediente: ${expediente}`);

    try {
      // Mostrar mensaje de carga
      await bot.sendMessage(
        chatId,
        'üîÑ *Consultando expediente...*\n\n_Estoy obteniendo toda la informaci√≥n disponible. Esto tomar√° solo unos segundos._',
        { parse_mode: 'Markdown' }
      );

      // ‚ú® NUEVA FUNCIONALIDAD: Pre-carga completa autom√°tica
      const expedienteCompleto = await botService.obtenerExpedienteCompleto(expediente);

      if (expedienteCompleto?.expediente) {
        // Guardar datos completos en la sesi√≥n del usuario
        // eslint-disable-next-line no-param-reassign
        usuario.datosExpediente = expedienteCompleto.expediente;
        // eslint-disable-next-line no-param-reassign
        usuario.expedienteCompleto = expedienteCompleto;
        // eslint-disable-next-line no-param-reassign
        usuario.expediente = expediente;
        // eslint-disable-next-line no-param-reassign
        usuario.etapa = 'menu_seguimiento';

        // Mostrar detalles b√°sicos con nuevo teclado que incluye "Resumen Completo"
        const detalles = formatExpedienteDetails(expedienteCompleto.expediente); // eslint-disable-line @typescript-eslint/no-use-before-define
        await bot.sendMessage(chatId, detalles, {
          parse_mode: 'Markdown',
          reply_markup: getSeguimientoKeyboard(expedienteCompleto.expediente),
        });

        // Mostrar notificaci√≥n de que los datos est√°n listos
        await bot.sendMessage(
          chatId,
          '‚úÖ *Informaci√≥n completa cargada y lista*\n\n' +
          'üöÄ Usa el bot√≥n "*üìã Resumen Completo*" para ver toda la informaci√≥n de una vez, ' +
          'o navega por las opciones individuales.',
          { parse_mode: 'Markdown' }
        );

      } else {
        await bot.sendMessage(
          chatId,
          '‚ùå Lo siento, el n√∫mero de expediente no es v√°lido o no se encontr√≥ informaci√≥n. Por favor, intenta nuevamente.'
        );
      }
    } catch (error) {
      console.error('‚ùå Error:', error);
      await bot.sendMessage(
        chatId,
        '‚ùå Hubo un error al consultar la informaci√≥n. Por favor, intenta m√°s tarde.'
      );
    }
  } else {
    await bot.sendMessage(
      chatId,
      '‚ö†Ô∏è Por favor, *ingresa un n√∫mero de expediente v√°lido* (solo letras, n√∫meros, espacios y guiones).',
      { parse_mode: 'Markdown' }
    );
  }
}

/**
 * Formatea los detalles del expediente para mostrarlos
 */
function formatExpedienteDetails(expedienteData: DatosExpediente): string {
  return (
    `üîç *Detalles del Expediente*\n` +
    `- ***ESTATUS: ${expedienteData.estatus || 'N/A'}***\n` +
    `- ***SERVICIO: ${expedienteData.servicio || 'N/A'}***\n\n` +
    `- **Nombre:** ${expedienteData.nombre || 'N/A'}\n` +
    `- **Veh√≠culo:** ${expedienteData.vehiculo || 'N/A'}\n` +
    `- **Destino:** ${expedienteData.destino || 'N/A'}\n\n` +
    `üìã *Selecciona una opci√≥n para ver m√°s detalles:*`
  );
}

/**
 * Procesa las acciones de men√∫ seleccionadas
 */
export async function processMenuAction(
  bot: TelegramBot,
  chatId: number,
  usuario: Usuario,
  opcion: string,
  botService: BotService
): Promise<void> {
  const { expediente } = usuario;

  if (!expediente) {
    await bot.sendMessage(
      chatId,
      '‚ùå No hay expediente activo. Por favor escribe tu n√∫mero de expediente.'
    );
    return;
  }

  try {
    switch (opcion) {
      case 'resumen_completo':
        await handleResumenCompleto(bot, chatId, usuario); // eslint-disable-line @typescript-eslint/no-use-before-define
        break;
      case 'costo_servicio':
        await handleCostoServicio(bot, chatId, expediente, usuario, botService);
        break;
      case 'datos_unidad':
        await handleDatosUnidad(bot, chatId, expediente, usuario, botService);
        break;
      case 'ubicacion_tiempo':
        await handleUbicacionTiempo(bot, chatId, expediente, usuario, botService);
        break;
      case 'tiempos':
        await handleTiempos(bot, chatId, expediente, usuario, botService);
        break;
      case 'otro_expediente':
        // eslint-disable-next-line no-param-reassign
        usuario.etapa = 'initial';
        await bot.sendMessage(
          chatId,
          'üîÑ *Consultar otro expediente*\n\n' +
          'üìù Escribe el n√∫mero del nuevo expediente:',
          {
            parse_mode: 'Markdown',
          }
        );
        break;
      default:
        await bot.sendMessage(
          chatId,
          '‚ÑπÔ∏è Opci√≥n no reconocida. Por favor, selecciona una opci√≥n v√°lida.',
          {
            reply_markup: getSeguimientoKeyboard(usuario.datosExpediente),
          }
        );
        break;
    }
  } catch (error) {
    console.error('‚ùå Error en processMenuAction:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå Hubo un error al procesar tu solicitud. Por favor, intenta nuevamente m√°s tarde.',
      { reply_markup: getSeguimientoKeyboard(usuario.datosExpediente) }
    );
  }
}

/**
 * Maneja la solicitud de resumen completo del expediente
 */
async function handleResumenCompleto(
  bot: TelegramBot,
  chatId: number,
  usuario: Usuario
): Promise<void> {
  try {
    const { expedienteCompleto, expediente } = usuario;

    if (!expedienteCompleto || !expediente) {
      await bot.sendMessage(
        chatId,
        '‚ùå No hay informaci√≥n completa disponible. Por favor, consulta un expediente primero.'
      );
      return;
    }

    // Mostrar mensaje de preparaci√≥n
    await bot.sendMessage(
      chatId,
      'üìã *Generando resumen completo...*\n\n_Preparando toda la informaci√≥n de tu expediente._',
      { parse_mode: 'Markdown' }
    );

    // Generar resumen completo utilizando las funciones existentes de formateo
    const resumenCompleto = await generateResumenCompleto(expedienteCompleto, expediente); // eslint-disable-line @typescript-eslint/no-use-before-define

    // Enviar el resumen completo
    await bot.sendMessage(
      chatId,
      resumenCompleto,
      {
        parse_mode: 'Markdown',
        reply_markup: getSeguimientoKeyboard(usuario.datosExpediente),
      }
    );

    // Mensaje final con opciones
    await bot.sendMessage(
      chatId,
      '‚úÖ *Resumen completo enviado*\n\n' +
      'üí° Puedes usar los botones individuales si necesitas consultar informaci√≥n espec√≠fica nuevamente.',
      { parse_mode: 'Markdown' }
    );

  } catch (error) {
    console.error('‚ùå Error al generar resumen completo:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå Hubo un error al generar el resumen completo. Puedes usar los botones individuales.',
      { reply_markup: getSeguimientoKeyboard(usuario.datosExpediente) }
    );
  }
}

/**
 * Genera un resumen completo del expediente combinando toda la informaci√≥n
 */
async function generateResumenCompleto(
  expedienteCompleto: ExpedienteCompleto,
  numeroExpediente: string
): Promise<string> {
  const { expediente, costo, unidad, ubicacion, tiempos } = expedienteCompleto;
  
  // Encabezado del resumen
  let resumen = `üìã *RESUMEN COMPLETO DEL EXPEDIENTE*\n`;
  resumen += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
  
  // ===== INFORMACI√ìN GENERAL =====
  resumen += `üîç *Detalles Generales*\n`;
  resumen += `- ***EXPEDIENTE: ${numeroExpediente}***\n`;
  resumen += `- ***ESTATUS: ${expediente.estatus || 'N/A'}***\n`;
  resumen += `- ***SERVICIO: ${expediente.servicio || 'N/A'}***\n`;
  resumen += `- **Nombre:** ${expediente.nombre || 'N/A'}\n`;
  resumen += `- **Veh√≠culo:** ${expediente.vehiculo || 'N/A'}\n`;
  resumen += `- **Destino:** ${expediente.destino || 'N/A'}\n\n`;
  
  // ===== INFORMACI√ìN DE COSTOS =====
  resumen += `üí∞ *Costo del Servicio*\n`;
  if (costo) {
    if (expediente.estatus === 'Cancelado') {
      resumen += `- **Costo Total:** ${formatCurrency(costo.costo)}\n`;
    } else {
      // Desglose seg√∫n tipo de servicio
      if (expediente.servicio === 'Local') {
        resumen += `- **Desglose:** ${costo.km || 'N/A'} km, plano ${costo.plano || 'N/A'}\n`;
      } else if (expediente.servicio === 'Carretero') {
        resumen += `- **Desglose:** ${costo.km || 'N/A'} km, banderazo ${costo.banderazo || 'N/A'} costo Km ${costo.costoKm || 'N/A'}\n`;
      } else {
        resumen += `- **Desglose:** ${costo.km || 'N/A'} km, plano ${costo.plano || 'N/A'}\n`;
      }
      
      // Desgloses adicionales (solo si > 0)
      if (costo.casetaACobro && costo.casetaACobro > 0) {
        resumen += `- **Caseta de Cobro:** ${formatCurrency(costo.casetaACobro)}\n`;
      }
      if (costo.casetaCubierta && costo.casetaCubierta > 0) {
        resumen += `- **Caseta Cubierta:** ${formatCurrency(costo.casetaCubierta)}\n`;
      }
      if (costo.resguardo && costo.resguardo > 0) {
        resumen += `- **Resguardo:** ${formatCurrency(costo.resguardo)}\n`;
      }
      if (costo.maniobras && costo.maniobras > 0) {
        resumen += `- **Maniobras:** ${formatCurrency(costo.maniobras)}\n`;
      }
      if (costo.horaEspera && costo.horaEspera > 0) {
        resumen += `- **Hora de Espera:** ${formatCurrency(costo.horaEspera)}\n`;
      }
      if (costo.Parking && costo.Parking > 0) {
        resumen += `- **Parking:** ${formatCurrency(costo.Parking)}\n`;
      }
      if (costo.Otros && costo.Otros > 0) {
        resumen += `- **Otros:** ${formatCurrency(costo.Otros)}\n`;
      }
      if (costo.excedente && costo.excedente > 0) {
        resumen += `- **Excedente:** ${formatCurrency(costo.excedente)}\n`;
      }
      
      resumen += `- **Costo Total:** ${formatCurrency(costo.costo)}\n`;
    }
  } else {
    resumen += `- **Informaci√≥n no disponible**\n`;
  }
  resumen += `\n`;
  
  // ===== INFORMACI√ìN DE LA UNIDAD =====
  resumen += `üöö *Datos de la Unidad o Gr√∫a*\n`;
  if (unidad) {
    // Extraer n√∫mero econ√≥mico y tipo de gr√∫a desde unidadOperativa
    let numeroEconomico = 'N/A';
    let tipoGrua = 'N/A';
    
    if (unidad.unidadOperativa) {
      const match = unidad.unidadOperativa.match(/^(\d+)\s*(.*)$/);
      if (match) {
        numeroEconomico = match[1] || 'N/A';
        tipoGrua = match[2] || 'N/A';
      }
    }
    
    resumen += `- **Operador:** ${unidad.operador || 'N/A'}\n`;
    resumen += `- **Tipo de Gr√∫a:** ${tipoGrua}\n`;
    resumen += `- **Color:** ${hexToColorName(unidad.color)}\n`;
    resumen += `- **N√∫mero Econ√≥mico:** ${numeroEconomico}\n`;
    resumen += `- **Placas:** ${unidad.placas || 'N/A'}\n`;
  } else {
    resumen += `- **Informaci√≥n no disponible**\n`;
  }
  resumen += `\n`;
  
  // ===== INFORMACI√ìN DE UBICACI√ìN =====
  resumen += `üìç *Ubicaci√≥n y Tiempo Restante*\n`;
  if (ubicacion) {
    let ubicacionTexto = 'N/A';
    
    if (ubicacion.latitud && ubicacion.longitud) {
      const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${ubicacion.latitud}%2C${ubicacion.longitud}`;
      ubicacionTexto = `[Ver en Maps](${mapsUrl})`;
    }
    
    resumen += `- **Ubicaci√≥n Actual de la Gr√∫a:** ${ubicacionTexto}\n`;
    resumen += `- **Tiempo Restante Estimado:** ${ubicacion.tiempoRestante || 'N/A'}\n`;
  } else {
    resumen += `- **Informaci√≥n no disponible**\n`;
  }
  resumen += `\n`;
  
  // ===== INFORMACI√ìN DE TIEMPOS =====
  resumen += `‚è∞ *Tiempos del Expediente*\n`;
  if (tiempos) {
    const contacto = tiempos.tc ? `${formatDateTime(tiempos.tc)} ‚è≥` : 'a√∫n sin contacto';
    const termino = tiempos.tt ? `${formatDateTime(tiempos.tt)} ‚è≥` : 'a√∫n sin t√©rmino';
    
    resumen += `- **Contacto:** ${contacto}\n`;
    resumen += `- **Termino:** ${termino}\n`;
  } else {
    resumen += `- **Informaci√≥n no disponible**\n`;
  }
  
  // Pie del resumen
  resumen += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  resumen += `‚ö° *Datos obtenidos en tiempo real*\n`;
  resumen += `üïí Consultado: ${formatDateTime(expedienteCompleto.fechaConsulta)}`;
  
  return resumen;
}
